    // Start of Selection
    // This is your Prisma schema file,
    // learn more about it in the docs: https://pris.ly/d/prisma-schema
    
    // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
    // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
    
    generator client {
      provider = "prisma-client-js"
    }
    
    datasource db {
      provider = "postgresql"
      url      = env("DATABASE_URL")
    }
    
    model Media {
      id        Int      @id @default(autoincrement())
      title     String
      url       String
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt
      groupId   Int?
      group     Group?   @relation(fields: [groupId], references: [id])
    }
    
    model Group {
      id        Int      @id @default(autoincrement())
      name      String
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt
      media     Media[]
    }
    
    model User {
      id    Int    @id @default(autoincrement())
      name  String?
      email String @unique
      // ... other fields ...
    }
    
    model Account {
      id                String  @id @default(cuid())
      userId            String
      type              String
      provider          String
      providerAccountId String
      refresh_token     String? @db.Text
      access_token      String? @db.Text
      expires_at        Int?
      token_type        String?
      scope             String?
      id_token          String? @db.Text
      session_state     String?
    
      user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    
      @@unique([provider, providerAccountId])
    }
    
    model Session {
      id           String   @id @default(cuid())
      sessionToken String   @unique
      userId       String
      expires      DateTime
      user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    }
    
    model VerificationToken {
      identifier String
      token      String   @unique
      expires    DateTime
    
      @@unique([identifier, token])
    }
    
    model Listing {
      id          Int      @id @default(autoincrement())
      title       String
      description String
      price       Float
      location    String
      userId      Int
      user        User     @relation(fields: [userId], references: [id])
      // ... other fields ...
    }
    
    model Commission {
      id        String   @id @default(uuid())
      userId    String
      listingId String
      amount    Float
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt
    
      user    User    @relation(fields: [userId], references: [id])
      listing Listing @relation(fields: [listingId], references: [id])
    }
    
    model Subscription {
      id        String   @id @default(cuid())
      userId    String
      plan      String
      status    String
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt
    
      user User @relation(fields: [userId], references: [id])
    }
    
    model Location {
      id        String   @id @default(cuid())
      latitude  Float
      longitude Float
      address   String
      listing   Listing  @relation(fields: [listingId], references: [id])
      listingId String
    }
    
    model Image {
      id        String   @id @default(cuid())
      url       String
      listing   Listing  @relation(fields: [listingId], references: [id])
      listingId String
    }
    
    model AccessToken {
      id        String   @id @default(cuid())
      token     String   @unique
      listingId String
      listing   Listing  @relation(fields: [listingId], references: [id])
      userId    String
      user      User     @relation(fields: [userId], references: [id])
      expiresAt DateTime
    }
